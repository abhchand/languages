{"version":3,"sources":["Pages/Home/Home.jsx","shared/shuffle.js","shared/fetch-data.js","Pages/Flashcards/Flashcards.jsx","Pages/TableOfLetters/TableOfLetters.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Home","props","state","className","to","React","Component","shuffle","a","j","x","i","length","Math","floor","random","fetchData","shouldShuffle","self","this","setState","isLoading","fetch","process","then","response","json","result","cards","JSON","parse","stringify","data","language","alphabet","currentIndex","Flashcards","bind","nextCard","prevCard","revealAnswer","formatExample","renderHidden","renderAnswer","match","params","isAnswerHidden","newIndex","card","dangerouslySetInnerHTML","__html","example","onClick","pronounce","type","value","char","TableOfLetters","map","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.55599598.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from \"react-router-dom\";\n\nimport './Home.css';\n\nclass Home extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"home content\">\n        <h1>Languages</h1>\n\n        <h3>Tamil</h3>\n          <p>Lettters</p>\n          <ul>\n            <li><NavLink to={'/languages/tamil/letters'}>View as list</NavLink></li>\n            <li><NavLink to={'/languages/tamil/letters/flashcards'}>View as flashcards</NavLink></li>\n          </ul>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","/**\n * Shuffles array in place.\n * @param {Array} a items An array containing the items.\n */\nfunction shuffle(a) {\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i--) {\n    j = Math.floor(Math.random() * (i + 1));\n    x = a[i];\n    a[i] = a[j];\n    a[j] = x;\n  }\n  return a;\n}\n\nexport default shuffle;\n","import shuffle from './shuffle';\n\nfunction fetchData(shouldShuffle = false) {\n  const self = this;\n\n  this.setState({ isLoading: true });\n\n  fetch(process.env.PUBLIC_URL + '/data.json').\n    then(function(response) { return response.json(); }).\n    then(function(result) {\n      const cards = JSON.parse(JSON.stringify(result.data[self.language].alphabet));\n      self.setState({\n        cards: shouldShuffle ? shuffle(cards) : cards,\n        isLoading: false,\n        currentIndex: 0\n      });\n    });\n}\n\nexport default fetchData;\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { NavLink } from \"react-router-dom\";\nimport fetchData from '../../shared/fetch-data';\n\nimport './Flashcards.css';\n\nclass Flashcards extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.fetchData = fetchData.bind(this);\n    this.nextCard = this.nextCard.bind(this);\n    this.prevCard = this.prevCard.bind(this);\n    this.revealAnswer = this.revealAnswer.bind(this);\n    this.formatExample = this.formatExample.bind(this);\n    this.renderHidden = this.renderHidden.bind(this);\n    this.renderAnswer = this.renderAnswer.bind(this);\n\n    this.language = props.match.params.language;\n\n    this.state = {\n      cards: [],\n      isLoading: true,\n      currentIndex: 0,\n      isAnswerHidden: true\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData(true);\n  }\n\n  nextCard() {\n    let newIndex = this.state.currentIndex + 1;\n\n    if (newIndex >= this.state.cards.length) {\n      newIndex = 0;\n    }\n\n    this.setState({\n      currentIndex: newIndex,\n      isAnswerHidden: true\n    })\n  }\n\n  prevCard() {\n    let newIndex = this.state.currentIndex - 1;\n\n    if (newIndex < 0) {\n      newIndex = this.state.cards.length - 1;\n    }\n\n    this.setState({\n      currentIndex: newIndex,\n      isAnswerHidden: true\n    });\n  }\n\n  revealAnswer() {\n    this.setState({ isAnswerHidden: false });\n  }\n\n  formatExample(card) {\n    return <span dangerouslySetInnerHTML={{__html: card.example }}></span>;\n  }\n\n  renderHidden() {\n    return <div className={'hidden'} onClick={this.revealAnswer}>Click to reveal</div>;\n  }\n\n  renderAnswer(card) {\n    return (\n      <div className={'answer'}>\n        <p className=\"pronunciation\">{card.pronounce}</p>\n        <p className=\"example\">As in: {this.formatExample(card)}</p>\n      </div>\n    );\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return <h1>Loading...</h1>;\n    }\n\n    const { currentIndex } = this.state;\n    const card = this.state.cards[currentIndex];\n\n    return (\n      <div className=\"flashcard content\">\n        <div className='nav'>\n          <NavLink to={'/languages'}><input type=\"button\" value={\"Home\"} /></NavLink>\n          <NavLink to={`/languages/${this.language}/letters`}><input type=\"button\" value={\"View as list\"} /></NavLink>\n        </div>\n\n        <div className=\"value\">{card.char}</div>\n\n        {this.state.isAnswerHidden ? this.renderHidden() : this.renderAnswer(card)}\n\n        <div className=\"counter\">{currentIndex + 1} of {this.state.cards.length}</div>\n        <input className=\"prev\" type=\"button\" onClick={this.prevCard} value={\"← Prev\"} />\n        <input className=\"next\" type=\"button\" onClick={this.nextCard} value={\"Next →\"} />\n      </div>\n    );\n  }\n}\n\nexport default Flashcards;\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { NavLink } from \"react-router-dom\";\nimport fetchData from '../../shared/fetch-data';\n\nimport './TableOfLetters.css';\n\nclass TableOfLetters extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.fetchData = fetchData.bind(this);\n    this.formatExample = this.formatExample.bind(this);\n\n    this.language = props.match.params.language;\n\n    this.state = {\n      cards: [],\n      isLoading: true\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  formatExample(card) {\n    return <td dangerouslySetInnerHTML={{__html: card.example }}></td>;\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return <h1>Loading...</h1>;\n    }\n\n    return (\n      <div className=\"content\">\n        <div className='table-of-letters__nav'>\n          <NavLink to={'/languages'}><input type=\"button\" value={\"Home\"} /></NavLink>\n          <NavLink to={`/languages/${this.language}/letters/flashcards`}><input type=\"button\" value={\"View as flashcards\"} /></NavLink>\n        </div>\n\n        <h1>{`${this.language} letters`}</h1>\n\n        <table>\n          <tr>\n            <th>Letter</th>\n            <th>Pronunciation</th>\n            <th>Example</th>\n          </tr>\n\n          {\n            this.state.cards.map(card => {\n              return (\n                <tr>\n                  <td>{card.char}</td>\n                  <td>{card.pronounce}</td>\n                  {this.formatExample(card)}\n                </tr>\n              );\n            })\n          }\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default TableOfLetters;\n","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Home from './Pages/Home/Home';\nimport Flashcards from './Pages/Flashcards/Flashcards';\nimport TableOfLetters from './Pages/TableOfLetters/TableOfLetters';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/languages/\" exact component={Home} />\n          <Route path=\"/languages/:language/letters\" exact component={TableOfLetters} />\n          <Route path=\"/languages/:language/letters/flashcards\" exact component={Flashcards} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}