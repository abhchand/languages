{"version":3,"sources":["Pages/Home/Home.jsx","Pages/Flashcards/shuffle.js","Pages/Flashcards/Flashcards.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Home","props","state","React","Component","shuffle","a","j","x","i","length","Math","floor","random","Flashcards","nextCard","bind","fetchData","cards","isLoading","currentIndex","isAnswerHidden","this","self","setState","fetch","process","then","response","json","result","JSON","parse","stringify","data","tamil","alphabet","newIndex","card","class","char","pronounce","example","type","onClick","value","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sUAoBeA,G,wDAdb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,GAHI,E,qDAQjB,OACE,yD,GAXaC,IAAMC,Y,OCWVC,MAXf,SAAiBC,GACf,IAAIC,EAAGC,EAAGC,EACV,IAAKA,EAAIH,EAAEI,OAAS,EAAGD,EAAI,EAAGA,IAC5BF,EAAII,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpCD,EAAIF,EAAEG,GACNH,EAAEG,GAAKH,EAAEC,GACTD,EAAEC,GAAKC,EAET,OAAOF,GCiEMQ,G,wDAtEb,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IAEDc,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBAEjB,EAAKd,MAAQ,CACXgB,MAAO,GACPC,WAAW,EACXC,aAAc,EACdC,gBAAgB,GAVD,E,gEAejBC,KAAKL,c,kCAIL,IAAMM,EAAOD,KAEbA,KAAKE,SAAS,CAAEL,WAAW,IAE3BM,MAAMC,wBACJC,MAAK,SAASC,GAAY,OAAOA,EAASC,UAC1CF,MAAK,SAASG,GACZ,IAAMZ,EAAQa,KAAKC,MAAMD,KAAKE,UAAUH,EAAOI,KAAKC,MAAMC,WAC1Db,EAAKC,SAAS,CACZN,MAAOb,EAAQa,GACfC,WAAW,EACXC,aAAc,S,iCAMpB,IAAIiB,EAAWf,KAAKpB,MAAMkB,aAAe,EAErCiB,GAAYf,KAAKpB,MAAMgB,MAAMR,SAC/B2B,EAAW,GAGbf,KAAKE,SAAS,CACZJ,aAAciB,EACdhB,gBAAgB,M,+BAKlB,GAAIC,KAAKpB,MAAMiB,UACb,OAAO,0CAFF,IAKCC,EAAiBE,KAAKpB,MAAtBkB,aACFkB,EAAOhB,KAAKpB,MAAMgB,MAAME,GAE9B,OACE,yBAAKmB,MAAM,aACT,yBAAKA,MAAM,WAAWnB,EAAe,EAArC,OAA4CE,KAAKpB,MAAMgB,MAAMR,QAC7D,yBAAK6B,MAAM,SAASD,EAAKE,MACzB,yBAAKD,MAAM,UACT,2BAAID,EAAKG,WACT,2BAAIH,EAAKI,UAEX,2BAAOC,KAAK,SAASC,QAAStB,KAAKP,SAAU8B,MAAO,c,GAlEnC1C,IAAMC,YCehB0C,E,uKAXX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWjD,IACjC,kBAAC,IAAD,CAAO+C,KAAK,cAAcE,UAAWnC,U,GAN7BX,IAAMC,WCKJ8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7d03c894.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Home.css';\n\nclass Home extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n    };\n  }\n\n  render() {\n    return (\n      <h1>THIS IS THE HOME PAGE</h1>\n    );\n  }\n}\n\nexport default Home;\n","/**\n * Shuffles array in place.\n * @param {Array} a items An array containing the items.\n */\nfunction shuffle(a) {\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i--) {\n    j = Math.floor(Math.random() * (i + 1));\n    x = a[i];\n    a[i] = a[j];\n    a[j] = x;\n  }\n  return a;\n}\n\nexport default shuffle;\n","import React from 'react';\nimport shuffle from './shuffle';\n\nimport './Flashcards.css';\n\nclass Flashcards extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.nextCard = this.nextCard.bind(this);\n    this.fetchData = this.fetchData.bind(this);\n\n    this.state = {\n      cards: [],\n      isLoading: true,\n      currentIndex: 0,\n      isAnswerHidden: true\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData() {\n    const self = this;\n\n    this.setState({ isLoading: true });\n\n    fetch(process.env.PUBLIC_URL + '/data.json').\n      then(function(response) { return response.json(); }).\n      then(function(result) {\n        const cards = JSON.parse(JSON.stringify(result.data.tamil.alphabet));\n        self.setState({\n          cards: shuffle(cards),\n          isLoading: false,\n          currentIndex: 0\n        });\n      });\n  }\n\n  nextCard() {\n    let newIndex = this.state.currentIndex + 1;\n\n    if (newIndex >= this.state.cards.length) {\n      newIndex = 0;\n    }\n\n    this.setState({\n      currentIndex: newIndex,\n      isAnswerHidden: true\n    })\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return <h1>Loading...</h1>;\n    }\n\n    const { currentIndex } = this.state;\n    const card = this.state.cards[currentIndex];\n\n    return (\n      <div class=\"flashcard\">\n        <div class=\"counter\">{currentIndex + 1} of {this.state.cards.length}</div>\n        <div class=\"value\">{card.char}</div>\n        <div class=\"answer\">\n          <p>{card.pronounce}</p>\n          <p>{card.example}</p>\n        </div>\n        <input type=\"button\" onClick={this.nextCard} value={\"Next\"} />\n      </div>\n    );\n  }\n}\n\nexport default Flashcards;\n","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Home from './Pages/Home/Home';\nimport Flashcards from './Pages/Flashcards/Flashcards';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/flashcards\" component={Flashcards} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}